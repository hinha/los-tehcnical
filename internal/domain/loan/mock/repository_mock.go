// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package provider is a generated GoMock package.
package provider

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	loan "github.com/hinha/los-technical/internal/domain/loan"
)

// MockLoanRepository is a mock of LoanRepository interface.
type MockLoanRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLoanRepositoryMockRecorder
}

// MockLoanRepositoryMockRecorder is the mock recorder for MockLoanRepository.
type MockLoanRepositoryMockRecorder struct {
	mock *MockLoanRepository
}

// NewMockLoanRepository creates a new mock instance.
func NewMockLoanRepository(ctrl *gomock.Controller) *MockLoanRepository {
	mock := &MockLoanRepository{ctrl: ctrl}
	mock.recorder = &MockLoanRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoanRepository) EXPECT() *MockLoanRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockLoanRepository) FindAll(page, limit int) ([]*loan.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", page, limit)
	ret0, _ := ret[0].([]*loan.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockLoanRepositoryMockRecorder) FindAll(page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockLoanRepository)(nil).FindAll), page, limit)
}

// FindByBorrowerID mocks base method.
func (m *MockLoanRepository) FindByBorrowerID(borrowerID string) ([]*loan.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByBorrowerID", borrowerID)
	ret0, _ := ret[0].([]*loan.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByBorrowerID indicates an expected call of FindByBorrowerID.
func (mr *MockLoanRepositoryMockRecorder) FindByBorrowerID(borrowerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByBorrowerID", reflect.TypeOf((*MockLoanRepository)(nil).FindByBorrowerID), borrowerID)
}

// FindByID mocks base method.
func (m *MockLoanRepository) FindByID(id string) (*loan.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*loan.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockLoanRepositoryMockRecorder) FindByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockLoanRepository)(nil).FindByID), id)
}

// FindByState mocks base method.
func (m *MockLoanRepository) FindByState(state loan.LoanState) ([]*loan.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByState", state)
	ret0, _ := ret[0].([]*loan.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByState indicates an expected call of FindByState.
func (mr *MockLoanRepositoryMockRecorder) FindByState(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByState", reflect.TypeOf((*MockLoanRepository)(nil).FindByState), state)
}

// Save mocks base method.
func (m *MockLoanRepository) Save(loan *loan.Loan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", loan)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockLoanRepositoryMockRecorder) Save(loan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockLoanRepository)(nil).Save), loan)
}

// Update mocks base method.
func (m *MockLoanRepository) Update(loan *loan.Loan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", loan)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockLoanRepositoryMockRecorder) Update(loan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLoanRepository)(nil).Update), loan)
}
